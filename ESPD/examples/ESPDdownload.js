Vue.component('ESPDdownload',{
    data(){
        return {
            meta_espd_doc: window.raw_data[window.espd_doc.espd_version],
            espd_model: window.espd_model,
            espd_structure: {
                partV: {
                    A: []
                }
            },
            show: true
        }
    },

    methods:{
        exportExample(){
            let schemeVersionID = window.espd_doc.espd_version.substring(1)
            //ESPD Request
            if(window.espd_doc.role == 'ca'){
                window.espd_request= xmlbuilder2.create({
                    version: '1.0',
                    encoding: 'UTF-8',
                    defaultNamespace: { ele: 'urn:oasis:names:specification:ubl:schema:xsd:QualificationApplicationRequest-2', att: null },
                    namespaceAlias: { cbc: 'urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2', cac: 'urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2' }
                })
                    .ele('QualificationApplicationRequest')
                    .att('http://www.w3.org/2001/XMLSchema-instance', 'xsi:schemaLocation', 'urn:oasis:names:specification:ubl:schema:xsd:QualificationApplicationRequest-2 ../xsdrt/maindoc/UBL-QualificationApplicationRequest-2.3.xsd')
                    .att('@xmlns', 'xmlns:fn', 'http://www.w3.org/2005/xpath-functions')
                    .att('@xmlns', 'xmlns:xs', 'http://www.w3.org/2001/XMLSchema')
                    .att('@xmlns', 'xmlns:cac', 'urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2')
                    .att('@xmlns', 'xmlns:cbc', 'urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2')
                    .att('@xmlns', 'xmlns:espd', `urn:com:grow:espd:${schemeVersionID}`)
                    .att('@xmlns', 'xmlns:text', 'urn:oasis:names:tc:opendocument:xmlns:text:1.0')
                    .att('@xmlns', 'xmlns:util', 'java:java.util.UUID')
                    .att('@xmlns', 'xmlns:style', 'urn:oasis:names:tc:opendocument:xmlns:style:1.0')
                    .att('@xmlns', 'xmlns:table', 'urn:oasis:names:tc:opendocument:xmlns:table:1.0')
                    .att('@xmlns', 'xmlns:office', 'urn:oasis:names:tc:opendocument:xmlns:office:1.0') 
            
                //Transform JSON documents into XML
                window.espd_request.com(` The ESPD-EDM-V${schemeVersionID} is entirely based on OASIS UBL-2.3 `)
                .ele('@cbc', 'UBLVersionID', { 'schemeAgencyID': 'OASIS-UBL-TC' }).txt('2.3').up()
                .com(` How ESPD-EDM-V${schemeVersionID} uses the UBL-2.3 schemas whilst keeping conformance `)
                .ele('@cbc', 'ProfileExecutionID', { 'schemeAgencyID': "OP", 'schemeVersionID': schemeVersionID }).txt(`ESPD-EDMv${schemeVersionID}`).up()
                .com(' The identifier of this document is generally generated by the systems that creates the ESPD ')
                .ele('@cbc', 'ID', { 'schemeAgencyID': window.espd_doc.procurer.name??'DGPE' }).txt(`ESPDREQ-${window.espd_doc.procurer.name??'DGPE'}-${crypto.randomUUID()}`).up()
                .com(' Indicates whether this document is an original or a copy. In this case the document is the original ')
                .ele('@cbc', 'CopyIndicator').txt('false').up()
                .com(' The unique identifier for this instance of the document. Copies of this document should have different UUIDs ')
                .ele('@cbc', 'UUID', { 'schemeID': 'ISO/IEC 9834-8:2008 - 4UUID', 'schemeAgencyID': 'XXXESPD-SERVICEXXX', 'schemeVersionID': schemeVersionID }).txt(crypto.randomUUID()).up()
                .com(' The reference number the contracting authority assigns to this procurement procedure ')
                .ele('@cbc', 'ContractFolderID', { 'schemeAgencyID': window.espd_doc.procurer.name??'DGPE' }).txt(window.espd_doc.procedure.file_refenrence??'PP.20170419.1024-9').up()
                .ele('@cbc', 'IssueDate').txt(JS2XML('date')).up()
                .ele('@cbc', 'IssueTime').txt(JS2XML('time')).up()
                .com(' The version of the content of this document. If the document is modified the element cbc:PreviousVersionID should be instantiated ')
                .ele('@cbc', 'VersionID', { 'schemeAgencyID': 'OP', 'schemeVersionID': schemeVersionID }).txt(schemeVersionID).up()
                .com(' The type of the procurement procedure; this information is provided by eForms and the concret notice per procedure. e.g. open = 	In open procedures any interested economic operator may submit a tender in response to a call for competition. ')
                .ele('@cbc', 'ProcedureCode', { "listID": "Dummy_procurement-procedure-type", "listAgencyID": "OP", "listVersionID": "yyyymmdd-0" }).txt('Open').up()
        
                window.espd_request.ele('@cac', 'ContractingParty')
                .ele('@cbc', 'BuyerProfileURI').txt(window.espd_doc.publication.OJS_URL??'DV').up()
                .ele('@cac', 'Party')
                .ele('@cbc', 'WebsiteURI').txt(window.espd_doc.publication.OJS_URL??'DV').up()
                .ele('@cbc', 'EndpointID', { 'schemeID': 'DV', 'schemeAgencyID': 'OP' }).txt(window.espd_doc.publication.OJS_URL??'DV').up()
                .ele('@cac', 'PartyIdentification')
                .ele('@cbc', 'ID', { 'schemeAgencyID': "VIES" }).txt(window.espd_doc.procurer.vat??'B82387770').up()
                .up()
                .ele('@cac', 'PartyName')
                .ele('@cbc', 'Name').txt(window.espd_doc.procurer.name??'DV').up()
                .up()
                .ele('@cac', 'PostalAddress')
                .ele('@cbc', 'StreetName').txt(window.espd_doc.procurer.street_and_number??'DV').up()
                .ele('@cbc', 'CityName').txt(window.espd_doc.procurer.city??'DV').up()
                .ele('@cbc', 'PostalZone').txt(window.espd_doc.procurer.postcode??'DV').up()
                .ele('@cac', 'Country')
                .ele('@cbc', 'IdentificationCode', { 'listID': "http://publications.europa.eu/resource/authority/country", 'listAgencyID': "ISO", 'listVersionID': "20220928-0" }).txt(window.espd_doc.procurer.country??'EU').up()
                .up()
                .up()
                .ele('@cac', 'Contact')
                .ele('@cbc', 'Name').txt(window.espd_doc.procurer.contact_person??'DV').up()
                .ele('@cbc', 'Telephone').txt(window.espd_doc.procurer.telephone??'DV').up()
                .ele('@cbc', 'ElectronicMail').txt(window.espd_doc.procurer.email??'DV').up()
                .up()
                .up()
                .up()

                window.espd_request.ele('@cac', 'ProcurementProject')
                .ele('@cbc', 'Description').txt(window.espd_doc.procedure.short_description??'Description of Project.').up()
                .up()

                render_request(window.espd_model)

                download('ESPD_Request.xml', window.espd_request.end({prettyPrint: true}))
            
            }

            //ESPD Response
            if(window.espd_doc.role == 'eo'){
                window.espd_response = xmlbuilder2.create({
                    version: '1.0',
                    encoding: 'UTF-8',
                    defaultNamespace: { ele: 'urn:oasis:names:specification:ubl:schema:xsd:QualificationApplicationResponse-2', att: null },
                    namespaceAlias: { cbc: 'urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2', cac: 'urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2' }
                })
                    .ele('QualificationApplicationResponse')
                    .att('http://www.w3.org/2001/XMLSchema-instance', 'xsi:schemaLocation', 'urn:oasis:names:specification:ubl:schema:xsd:QualificationApplicationResponse-2 ../xsdrt/maindoc/UBL-QualificationApplicationResponse-2.3.xsd')
                    .att('@xmlns', 'xmlns:fn', 'http://www.w3.org/2005/xpath-functions')
                    .att('@xmlns', 'xmlns:xs', 'http://www.w3.org/2001/XMLSchema')
                    .att('@xmlns', 'xmlns:cac', 'urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2')
                    .att('@xmlns', 'xmlns:cbc', 'urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2')
                    .att('@xmlns', 'xmlns:espd', `urn:com:grow:espd:${schemeVersionID}`)
                
                //Build the ESPD Response from JSON parts
                window.espd_response.com(` The ESPD-EDM-V${schemeVersionID} is entirely based on OASIS UBL-2.3 `)
                .ele('@cbc', 'UBLVersionID', { 'schemeAgencyID': "OASIS-UBL-TC" }).txt('2.3').up()
                .com(` How ESPD-EDM-V${schemeVersionID} uses the UBL-2.3 schemas whilst keeping conformance `)
                .ele('@cbc', 'ProfileExecutionID', { 'schemeAgencyID': "OP", 'schemeVersionID': schemeVersionID }).txt(`ESPD-EDMv${schemeVersionID}`).up()
                .com(` The identifier of this document	generally generated by the systems that creates the ESPD `)
                .ele('@cbc', 'ID', { 'schemeAgencyID': window.espd_doc.procurer.name??'DGPE' }).txt(`ESPDREQ-${window.espd_doc.procurer.name??'DGPE'}-${crypto.randomUUID()}`).up()
                .com(' Indicates whether this document is an original or a copy. In this case the document is the original ')
                .ele('@cbc', 'CopyIndicator').txt('false').up()
                .com(' The unique identifier for this instance of the document. Copies of this document should have different UUIDs ')
                .ele('@cbc', 'UUID', { 'schemeID': 'ISO/IEC 9834-8:2008 - 4UUID', 'schemeAgencyID': 'XXXESPD-SERVICEXXX', 'schemeVersionID': schemeVersionID }).txt(crypto.randomUUID()).up()
                .com(' The reference number the contracting authority assigns to this procurement procedure ')
                .ele('@cbc', 'ContractFolderID', { 'schemeAgencyID': window.espd_doc.procurer.name??'DGPE' }).txt(window.espd_doc.procedure.file_refenrence??'PP.20170419.1024-9').up()
                .ele('@cbc', 'IssueDate').txt(JS2XML('date')).up()
                .ele('@cbc', 'IssueTime').txt(JS2XML('time')).up()
                .com(' The version of the content of this document. If the document is modified the element cbc:PreviousVersionID should be instantiated ')
                .ele('@cbc', 'VersionID', { 'schemeAgencyID': 'OP', 'schemeVersionID': schemeVersionID }).txt(schemeVersionID).up()
                .com(' The type of the procurement procedure; this information is provided by eForms and the concret notice per procedure. e.g. open = 	In open procedures any interested economic operator may submit a tender in response to a call for competition. ')
                .ele('@cbc', 'ProcedureCode', { "listID": "Dummy_procurement-procedure-type", "listAgencyID": "OP", "listVersionID": "yyyymmdd-0" }).txt('Open').up()
        
                window.espd_response.ele('@cac', 'ContractingParty')
                .ele('@cbc', 'BuyerProfileURI').txt(window.espd_doc.publication.OJS_URL??'DV').up()
                .ele('@cac', 'Party')
                .ele('@cbc', 'WebsiteURI').txt(window.espd_doc.publication.OJS_URL??'DV').up()
                .ele('@cbc', 'EndpointID', { 'schemeID': 'DV', 'schemeAgencyID': 'OP' }).txt(window.espd_doc.publication.OJS_URL??'DV').up()
                .ele('@cac', 'PartyIdentification')
                .ele('@cbc', 'ID', { 'schemeAgencyID': "VIES" }).txt(window.espd_doc.procurer.vat??'B82387770').up()
                .up()
                .ele('@cac', 'PartyName')
                .ele('@cbc', 'Name').txt(window.espd_doc.procurer.name??'DV').up()
                .up()
                .ele('@cac', 'PostalAddress')
                .ele('@cbc', 'StreetName').txt(window.espd_doc.procurer.street_and_number??'DV').up()
                .ele('@cbc', 'CityName').txt(window.espd_doc.procurer.city??'DV').up()
                .ele('@cbc', 'PostalZone').txt(window.espd_doc.procurer.postcode??'DV').up()
                .ele('@cac', 'Country')
                .ele('@cbc', 'IdentificationCode', { 'listID': "http://publications.europa.eu/resource/authority/country", 'listAgencyID': "ISO", 'listVersionID': "20220928-0" }).txt(window.espd_doc.procurer.country??'EU').up()
                .up()
                .up()
                .ele('@cac', 'Contact')
                .ele('@cbc', 'Name').txt(window.espd_doc.procurer.contact_person??'DV').up()
                .ele('@cbc', 'Telephone').txt(window.espd_doc.procurer.telephone??'DV').up()
                .ele('@cbc', 'ElectronicMail').txt(window.espd_doc.procurer.email??'DV').up()
                .up()
                .up()
                .up()

                window.espd_response.ele('@cac', 'EconomicOperatorParty')
                .ele('@cac', 'EconomicOperatorRole')
                .ele('@cbc', 'RoleCode', { 'listID': "http://publications.europa.eu/resource/authority/eo-role-type", 'listAgencyID': "OP", 'listVersionID': "20211208-0" }).txt('group-mem').up()
                .up()
                .ele('@cac', 'Party')
                .ele('@cbc', 'WebsiteURI').txt('https://www.ProcurerWebsite.eu').up()
                .ele('@cbc', 'IndustryClassificationCode', { 'listID': "http://publications.europa.eu/resource/authority/economic-operator-size", 'listAgencyID': "OP", 'listVersionID': "20220316-0" }).txt('sme').up()
                .ele('@cac', 'PartyIdentification')
                .ele('@cbc', 'ID', { 'schemeAgencyID': "OP" }).txt('AD123456789').up()
                .up()
                .ele('@cac', 'PartyName')
                .ele('@cbc', 'Name').txt('__Procurer Official Name__').up()
                .up()
                .ele('@cac', 'PostalAddress')
                .ele('@cbc', 'StreetName').txt('__ProcurerStreet__').up()
                .ele('@cbc', 'CityName').txt('__ProcurerCity__').up()
                .ele('@cbc', 'PostalZone').txt('12345').up()
                .ele('@cac', 'Country')
                .ele('@cbc', 'IdentificationCode', { 'listID': "http://publications.europa.eu/resource/authority/country", 'listAgencyID': "ISO", 'listName': "country", 'listVersionID': "20220928-0" }).txt('BEL').up()
                .up()
                .up()
                .ele('@cac', 'Contact')
                .ele('@cbc', 'Name').txt('__ProcurerContactName__').up()
                .ele('@cbc', 'Telephone').txt('654321').up()
                .ele('@cbc', 'Telefax').txt('098765').up()
                .ele('@cbc', 'ElectronicMail').txt('__ProcurerContact@gov.eu').up()
                .up()
                .up()
                .up()

                window.espd_response.ele('@cac', 'ProcurementProject')
                .ele('@cbc', 'Description').txt(window.espd_doc.procedure.short_description??'Description of Project.').up()
                .up()

                window.espd_response.ele('@cac', 'ProcurementProjectLot')
                .ele('@cbc', 'ID', { 'schemeID': "Criterion", 'schemeAgencyID': "OP", 'schemeVersionID': schemeVersionID }).txt('LOT-0000').up()
                .up()
        
                render_request(window.espd_model, window.espd_response)
                render_response(window.espd_model, window.espd_response)

                //Create evidence
                window.espd_response.ele('@cac', 'Evidence')
                .ele('@cbc', 'ID', { 'schemeAgencyID': "XXXAGENCYXXX" }).txt('EVIDENCE-001').up()
                .ele('@cbc', 'ConfidentialityLevelCode', { 'listID': "http://publications.europa.eu/resource/authority/access-right", 'listAgencyID': "OP", 'listVersionID': "20220316-0" }).txt('CONFIDENTIAL').up()
                .ele('@cac', 'DocumentReference')
                .ele('@cbc', 'ID', { 'schemeAgencyID': "XXXAGENCYXXX" }).txt('SAT-11121233').up()
                .ele('@cac', 'Attachment')
                .ele('@cac', 'ExternalReference')
                .ele('@cbc', 'URI').txt('https://dod.gov.usa/sat/it/soft/prk?id=11121233').up()
                .up().up()
                .ele('@cac', 'IssuerParty')
                .ele('@cac', 'PartyIdentification')
                .ele('@cbc', 'ID', { 'schemeAgencyID': "XXXAGENCYXXX" }).txt('XXXXXXXX').up()
                .up()
                .ele('@cac', 'PartyName')
                .ele('@cbc', 'Name').txt('USA DoD').up()
                .up()
                .up()
                .up()
                .up()

                download('ESPD_Response.xml', window.espd_response.end({prettyPrint: true}))
            }
        }
    },

    created(){
        //Build the UI part for each Criteria
        if (window.espd_doc.role == 'eo') {
            for (const key in this.meta_espd_doc.partV) {
                if (Object.hasOwn(this.meta_espd_doc.partV, key)) {
                    for (const el of this.meta_espd_doc.partV[key]) {
                        this.espd_structure.partV[key].push(`${window.espd_doc.espd_version}-${el}`)
                    }
                }
            }
        }
    },

    template: `
    <template>
    <b-conatiner>
    <b-row>
    <b-col>
    <div>
    <h6>Part V: Reduction of the number of qualified candidates</h6>
    </div>
    </b-col>
    </b-row>
    <b-row>
    <b-col>
    <div class="accordion" role="tablist">
        <b-card no-body class="mb-1">
        <b-card-header header-tag="header" class="p-1" role="tab">
            <b-button block v-b-toggle.accordion-s1 variant="info">A: The Economic Operator Declaration</b-button>
        </b-card-header>
        <b-collapse id="accordion-s1" accordion="my-accordion" role="tabpanel">
            <b-card-body v-if="window.espd_doc.role=='eo'" v-for="item in espd_structure['partV']['A']">
                <component v-bind:is="item"></component>
            </b-card-body>
        </b-collapse>
        </b-card>


        <b-card no-body class="mb-1">
        <b-card-header header-tag="header" class="p-1" role="tab">
            <b-button block v-b-toggle.accordion-fn1 variant="info">B. Save ESPD</b-button>
        </b-card-header>
        <b-collapse id="accordion-fn1" visible accordion="my-accordion" role="tabpanel">
            <b-card-body class='text-center'>
            <b-button variant="warning" @click="exportExample()">Download ESPD {{ window.espd_doc.role=='ca'?'Request':'Response'}}</b-button>
            </b-card-body>
        </b-collapse>
        </b-card>
    </div>
    </b-col>
    </b-row>
    </b-container>
    </template>
    `

})